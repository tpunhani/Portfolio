{"ast":null,"code":"import _slicedToArray from \"/Users/tarun/Downloads/developerFolio-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nexport var useLocalStorage = function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["/Users/tarun/Downloads/developerFolio-master/src/hooks/useLocalStorage.js"],"sourcesContent":["import {useState} from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,YAAN,EAAuB;EACpD;EACA;EACA,gBAAsCH,QAAQ,CAAC,YAAM;IACnD,IAAI;MACF;MACA,IAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAFE,CAGF;;MACA,OAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;IACD,CALD,CAKE,OAAOO,KAAP,EAAc;MACd;MACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACA,OAAOP,YAAP;IACD;EACF,CAX6C,CAA9C;EAAA;EAAA,IAAOU,WAAP;EAAA,IAAoBC,cAApB,iBAHoD,CAgBpD;EACA;;;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;IACxB,IAAI;MACF;MACA,IAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KADnD,CAFE,CAIF;;MACAF,cAAc,CAACG,YAAD,CAAd,CALE,CAMF;;MACAZ,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BjB,GAA5B,EAAiCM,IAAI,CAACY,SAAL,CAAeH,YAAf,CAAjC;IACD,CARD,CAQE,OAAOP,KAAP,EAAc;MACd;MACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CAbD;;EAeA,OAAO,CAACG,WAAD,EAAcE,QAAd,CAAP;AACD,CAlCM"},"metadata":{},"sourceType":"module"}