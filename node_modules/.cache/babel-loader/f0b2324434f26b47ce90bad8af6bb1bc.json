{"ast":null,"code":"import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/esm/createClass';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/esm/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/esm/getPrototypeOf';\nimport _inherits from '@babel/runtime/helpers/esm/inherits';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isRequiredIf from 'react-proptype-conditional-require';\nimport ExecutionEnvironment from 'exenv';\nvar twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\n\nvar TwitterTimelineEmbed = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterTimelineEmbed, _Component);\n\n  function TwitterTimelineEmbed(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTimelineEmbed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTimelineEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterTimelineEmbed, [{\n    key: \"buildChromeOptions\",\n    value: function buildChromeOptions(options) {\n      options.chrome = '';\n\n      if (this.props.noHeader) {\n        options.chrome = options.chrome + ' noheader';\n      }\n\n      if (this.props.noFooter) {\n        options.chrome = options.chrome + ' nofooter';\n      }\n\n      if (this.props.noBorders) {\n        options.chrome = options.chrome + ' noborders';\n      }\n\n      if (this.props.noScrollbar) {\n        options.chrome = options.chrome + ' noscrollbar';\n      }\n\n      if (this.props.transparent) {\n        options.chrome = options.chrome + ' transparent';\n      }\n\n      return options;\n    }\n  }, {\n    key: \"buildOptions\",\n    value: function buildOptions() {\n      var options = Object.assign({}, this.props.options);\n\n      if (this.props.autoHeight) {\n        options.height = this.refs.embedContainer.parentNode.offsetHeight;\n      }\n\n      options = Object.assign({}, options, {\n        theme: this.props.theme,\n        linkColor: this.props.linkColor,\n        borderColor: this.props.borderColor,\n        lang: this.props.lang\n      });\n      return options;\n    }\n  }, {\n    key: \"renderWidget\",\n    value: function renderWidget(options) {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (!this.isMountCanceled) {\n        window.twttr.widgets.createTimeline({\n          sourceType: this.props.sourceType,\n          screenName: this.props.screenName,\n          userId: this.props.userId,\n          ownerScreenName: this.props.ownerScreenName,\n          slug: this.props.slug,\n          id: this.props.id || this.props.widgetId,\n          url: this.props.url\n        }, this.refs.embedContainer, options).then(function (element) {\n          _this2.setState({\n            isLoading: false\n          });\n\n          if (onLoad) {\n            onLoad(element);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterTimelineEmbed, aborting load.');\n            return;\n          }\n\n          var options = _this3.buildOptions();\n          /** Append chrome options */\n\n\n          options = _this3.buildChromeOptions(options);\n\n          _this3.renderWidget(options);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterTimelineEmbed;\n}(Component);\n\n_defineProperty(TwitterTimelineEmbed, \"propTypes\", {\n  /**\n       * This can be either of profile, likes, list, collection, URL, widget\n       */\n  sourceType: PropTypes.oneOf(['profile', 'likes', 'list', 'collection', 'url', 'widget']).isRequired,\n\n  /**\n       * username of twitter handle as String\n       */\n  screenName: isRequiredIf(PropTypes.string, function (props) {\n    return !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes');\n  }),\n\n  /**\n       * UserId of twitter handle as number\n       */\n  userId: isRequiredIf(PropTypes.number, function (props) {\n    return !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes');\n  }),\n\n  /**\n       * To show list, used along with slug\n       */\n  ownerScreenName: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('id');\n  }),\n\n  /**\n       * To show list, used along with ownerScreenName\n       */\n  slug: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('id');\n  }),\n\n  /**\n       * To show list, unique list id\n       * Also used with collections, in that case its valid collection id\n       */\n  id: isRequiredIf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug') || props.sourceType === 'collection';\n  }),\n\n  /**\n       * To show twitter content with url.\n       * Supported content includes profiles, likes, lists, and collections.\n       */\n  url: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'url';\n  }),\n\n  /**\n       * To show custom widget\n       */\n  widgetId: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'widget';\n  }),\n\n  /**\n       * Additional options to pass to twitter widget plugin\n       */\n  options: PropTypes.object,\n\n  /**\n       * Automatically fit into parent container height\n       */\n  autoHeight: PropTypes.bool,\n\n  /**\n       * With dark or light theme\n       */\n  theme: PropTypes.oneOf(['dark', 'light']),\n\n  /**\n       * With custom link colors. Note: Only Hex colors are supported.\n       */\n  linkColor: PropTypes.string,\n\n  /**\n       * With custom border colors. Note: Only Hex colors are supported.\n       */\n  borderColor: PropTypes.string,\n\n  /**\n       * Hide the header from timeline\n       */\n  noHeader: PropTypes.bool,\n\n  /**\n       * Hide the footer from timeline\n       */\n  noFooter: PropTypes.bool,\n\n  /**\n       * Hide the border from timeline\n       */\n  noBorders: PropTypes.bool,\n\n  /**\n       * Hide the scrollbars\n       */\n  noScrollbar: PropTypes.bool,\n\n  /**\n       * Enable Transparancy\n       */\n  transparent: PropTypes.bool,\n\n  /**\n       * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n       */\n  lang: PropTypes.string,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterShareButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterShareButton, _Component);\n\n  function TwitterShareButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterShareButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterShareButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterShareButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterShareButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createShareButton(_this2.props.url, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterShareButton;\n}(Component);\n\n_defineProperty(TwitterShareButton, \"propTypes\", {\n  /**\n  * Url for sharing\n  */\n  url: PropTypes.string.isRequired,\n\n  /**\n  * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n  */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterFollowButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterFollowButton, _Component);\n\n  function TwitterFollowButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterFollowButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterFollowButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterFollowButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterFollowButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createFollowButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterFollowButton;\n}(Component);\n\n_defineProperty(TwitterFollowButton, \"propTypes\", {\n  /**\n       * Username of twitter user which will be followed on click\n       */\n  screenName: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterHashtagButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterHashtagButton, _Component);\n\n  function TwitterHashtagButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterHashtagButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterHashtagButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterHashtagButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterHashtagButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createHashtagButton(_this2.props.tag, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterHashtagButton;\n}(Component);\n\n_defineProperty(TwitterHashtagButton, \"propTypes\", {\n  /**\n       * Tag name for hashtag button\n       */\n  tag: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterMentionButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterMentionButton, _Component);\n\n  function TwitterMentionButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterMentionButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterMentionButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterMentionButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterMentionButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createMentionButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterMentionButton;\n}(Component);\n\n_defineProperty(TwitterMentionButton, \"propTypes\", {\n  /**\n   * Username to which you will need to tweet\n   */\n  screenName: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterTweetEmbed = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterTweetEmbed, _Component);\n\n  function TwitterTweetEmbed(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTweetEmbed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTweetEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterTweetEmbed, [{\n    key: \"renderWidget\",\n    value: function renderWidget() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr in TwitterTweetEmbed, aborting load.');\n        return;\n      }\n\n      if (!this.isMountCanceled) {\n        window.twttr.widgets.createTweet(this.props.tweetId, this.refs.embedContainer, this.props.options).then(function (element) {\n          _this2.setState({\n            isLoading: false\n          });\n\n          if (onLoad) {\n            onLoad(element);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          _this3.renderWidget();\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterTweetEmbed;\n}(Component);\n\n_defineProperty(TwitterTweetEmbed, \"propTypes\", {\n  /**\n       * Tweet id that needs to be shown\n       */\n  tweetId: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to pass to twitter widget plugin\n       */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterMomentShare = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterMomentShare, _Component);\n\n  function TwitterMomentShare(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterMomentShare);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterMomentShare).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterMomentShare, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterMomentShare, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createMoment(_this2.props.momentId, _this2.refs.shareMoment, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"shareMoment\"\n      }));\n    }\n  }]);\n\n  return TwitterMomentShare;\n}(Component);\n\n_defineProperty(TwitterMomentShare, \"propTypes\", {\n  /**\n   * id of Twitter moment to show\n   */\n  momentId: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterDMButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterDMButton, _Component);\n\n  function TwitterDMButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterDMButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterDMButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterDMButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterDMButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createDMButton(_this2.props.id, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterDMButton;\n}(Component);\n\n_defineProperty(TwitterDMButton, \"propTypes\", {\n  /**\n  * Twitter user id for DM button\n  */\n  id: PropTypes.number.isRequired,\n\n  /**\n  * Additional options to be added to the button\n  */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterVideoEmbed = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterVideoEmbed, _Component);\n\n  function TwitterVideoEmbed(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterVideoEmbed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterVideoEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterVideoEmbed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterVideoEmbed, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createVideo(_this2.props.id, _this2.refs.embedContainer).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterVideoEmbed;\n}(Component);\n\n_defineProperty(TwitterVideoEmbed, \"propTypes\", {\n  /**\n       * Id of video tweet.\n       */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterOnAirButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterOnAirButton, _Component);\n\n  function TwitterOnAirButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterOnAirButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterOnAirButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterOnAirButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterOnAirButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createPeriscopeOnAirButton(_this2.props.username, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterOnAirButton;\n}(Component);\n\n_defineProperty(TwitterOnAirButton, \"propTypes\", {\n  /**\n   * Username for which you require periscope on air button\n   */\n  username: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nexport { TwitterTimelineEmbed, TwitterShareButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterTweetEmbed, TwitterMomentShare, TwitterDMButton, TwitterVideoEmbed, TwitterOnAirButton };","map":{"version":3,"mappings":"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","names":["twitterWidgetJs","TwitterTimelineEmbed","props","state","isLoading","options","chrome","noHeader","noFooter","noBorders","noScrollbar","transparent","Object","assign","autoHeight","height","refs","embedContainer","parentNode","offsetHeight","theme","linkColor","borderColor","lang","onLoad","isMountCanceled","window","twttr","widgets","createTimeline","sourceType","screenName","userId","ownerScreenName","slug","id","widgetId","url","then","element","_this2","setState","ExecutionEnvironment","canUseDOM","script","require","console","error","_this3","buildOptions","buildChromeOptions","renderWidget","placeholder","React","Fragment","ref","Component","PropTypes","oneOf","isRequired","isRequiredIf","string","hasOwnProperty","number","oneOfType","object","bool","func","TwitterShareButton","createShareButton","TwitterFollowButton","createFollowButton","TwitterHashtagButton","createHashtagButton","tag","TwitterMentionButton","createMentionButton","TwitterTweetEmbed","createTweet","tweetId","TwitterMomentShare","createMoment","momentId","shareMoment","TwitterDMButton","createDMButton","TwitterVideoEmbed","createVideo","TwitterOnAirButton","createPeriscopeOnAirButton","username"],"sources":["../src/components/twitter-widget-url.js","../src/components/TwitterTimelineEmbed.js","../src/components/TwitterShareButton.js","../src/components/TwitterFollowButton.js","../src/components/TwitterHashtagButton.js","../src/components/TwitterMentionButton.js","../src/components/TwitterTweetEmbed.js","../src/components/TwitterMomentShare.js","../src/components/TwitterDMButton.js","../src/components/TwitterVideoEmbed.js","../src/components/TwitterOnAirButton.js"],"sourcesContent":["const twitterWidgetJs = 'https://platform.twitter.com/widgets.js'\nexport default twitterWidgetJs\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport isRequiredIf from 'react-proptype-conditional-require'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterTimelineEmbed extends Component {\n  static propTypes = {\n    /**\n         * This can be either of profile, likes, list, collection, URL, widget\n         */\n    sourceType: PropTypes.oneOf(['profile', 'likes', 'list', 'collection', 'url', 'widget']).isRequired,\n    /**\n         * username of twitter handle as String\n         */\n    screenName: isRequiredIf(PropTypes.string, props => !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes')),\n    /**\n         * UserId of twitter handle as number\n         */\n    userId: isRequiredIf(PropTypes.number, props => !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes')),\n    /**\n         * To show list, used along with slug\n         */\n    ownerScreenName: isRequiredIf(PropTypes.string, props => props.sourceType === 'list' && !props.hasOwnProperty('id')),\n    /**\n         * To show list, used along with ownerScreenName\n         */\n    slug: isRequiredIf(PropTypes.string, props => props.sourceType === 'list' && !props.hasOwnProperty('id')),\n    /**\n         * To show list, unique list id\n         * Also used with collections, in that case its valid collection id\n         */\n    id: isRequiredIf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), props => (props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug')) || props.sourceType === 'collection'),\n    /**\n         * To show twitter content with url.\n         * Supported content includes profiles, likes, lists, and collections.\n         */\n    url: isRequiredIf(PropTypes.string, props => props.sourceType === 'url'),\n    /**\n         * To show custom widget\n         */\n    widgetId: isRequiredIf(PropTypes.string, props => props.sourceType === 'widget'),\n    /**\n         * Additional options to pass to twitter widget plugin\n         */\n    options: PropTypes.object,\n    /**\n         * Automatically fit into parent container height\n         */\n    autoHeight: PropTypes.bool,\n    /**\n         * With dark or light theme\n         */\n    theme: PropTypes.oneOf(['dark', 'light']),\n    /**\n         * With custom link colors. Note: Only Hex colors are supported.\n         */\n    linkColor: PropTypes.string,\n    /**\n         * With custom border colors. Note: Only Hex colors are supported.\n         */\n    borderColor: PropTypes.string,\n    /**\n         * Hide the header from timeline\n         */\n    noHeader: PropTypes.bool,\n    /**\n         * Hide the footer from timeline\n         */\n    noFooter: PropTypes.bool,\n    /**\n         * Hide the border from timeline\n         */\n    noBorders: PropTypes.bool,\n    /**\n         * Hide the scrollbars\n         */\n    noScrollbar: PropTypes.bool,\n    /**\n         * Enable Transparancy\n         */\n    transparent: PropTypes.bool,\n    /**\n         * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n         */\n    lang: PropTypes.string,\n\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  buildChromeOptions(options) {\n    options.chrome = ''\n    if (this.props.noHeader) { options.chrome = options.chrome + ' noheader' }\n\n    if (this.props.noFooter) { options.chrome = options.chrome + ' nofooter' }\n\n    if (this.props.noBorders) { options.chrome = options.chrome + ' noborders' }\n\n    if (this.props.noScrollbar) { options.chrome = options.chrome + ' noscrollbar' }\n\n    if (this.props.transparent) { options.chrome = options.chrome + ' transparent' }\n\n    return options\n  }\n\n  buildOptions() {\n    let options = Object.assign({}, this.props.options)\n    if (this.props.autoHeight) { options.height = this.refs.embedContainer.parentNode.offsetHeight }\n\n    options = Object.assign({}, options, {\n      theme: this.props.theme,\n      linkColor: this.props.linkColor,\n      borderColor: this.props.borderColor,\n      lang: this.props.lang\n    })\n\n    return options\n  }\n\n  renderWidget(options) {\n    const { onLoad } = this.props\n    if (!this.isMountCanceled) {\n      window.twttr.widgets.createTimeline(\n        {\n          sourceType: this.props.sourceType,\n          screenName: this.props.screenName,\n          userId: this.props.userId,\n          ownerScreenName: this.props.ownerScreenName,\n          slug: this.props.slug,\n          id: this.props.id || this.props.widgetId,\n          url: this.props.url\n        },\n        this.refs.embedContainer,\n        options\n      ).then((element) => {\n        this.setState({\n          isLoading: false\n        })\n        if (onLoad) {\n          onLoad(element)\n        }\n      })\n    }\n  }\n\n  componentDidMount() {\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterTimelineEmbed, aborting load.')\n          return\n        }\n\n        let options = this.buildOptions()\n        /** Append chrome options */\n        options = this.buildChromeOptions(options)\n        this.renderWidget(options)\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterShareButton extends Component {\n  static propTypes = {\n    /**\n    * Url for sharing\n    */\n    url: PropTypes.string.isRequired,\n    /**\n    * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n    */\n    options: PropTypes.object,\n\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterShareButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createShareButton(\n            this.props.url,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterFollowButton extends Component {\n  static propTypes = {\n    /**\n         * Username of twitter user which will be followed on click\n         */\n    screenName: PropTypes.string.isRequired,\n    /**\n         * Additional options to be added to the button\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterFollowButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createFollowButton(\n            this.props.screenName,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterHashtagButton extends Component {\n  static propTypes = {\n    /**\n         * Tag name for hashtag button\n         */\n    tag: PropTypes.string.isRequired,\n    /**\n         * Additional options to be added to the button\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterHashtagButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createHashtagButton(\n            this.props.tag,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterMentionButton extends Component {\n  static propTypes = {\n    /**\n     * Username to which you will need to tweet\n     */\n    screenName: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterMentionButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createMentionButton(\n            this.props.screenName,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterTweetEmbed extends Component {\n  static propTypes = {\n    /**\n         * Tweet id that needs to be shown\n         */\n    tweetId: PropTypes.string.isRequired,\n    /**\n         * Additional options to pass to twitter widget plugin\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  renderWidget() {\n    const { onLoad } = this.props\n    if (!window.twttr) {\n      console.error('Failure to load window.twttr in TwitterTweetEmbed, aborting load.')\n      return\n    }\n    if (!this.isMountCanceled) {\n      window.twttr.widgets.createTweet(\n        this.props.tweetId,\n        this.refs.embedContainer,\n        this.props.options\n      ).then((element) => {\n        this.setState({\n          isLoading: false\n        })\n        if (onLoad) {\n          onLoad(element)\n        }\n      })\n    }\n  }\n\n  componentDidMount() {\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        this.renderWidget()\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterMomentShare extends Component {\n  static propTypes = {\n    /**\n     * id of Twitter moment to show\n     */\n    momentId: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterMomentShare, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createMoment(\n            this.props.momentId,\n            this.refs.shareMoment,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='shareMoment' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterDMButton extends Component {\n  static propTypes = {\n    /**\n    * Twitter user id for DM button\n    */\n    id: PropTypes.number.isRequired,\n    /**\n    * Additional options to be added to the button\n    */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterDMButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createDMButton(\n            this.props.id,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterVideoEmbed extends Component {\n  static propTypes = {\n    /**\n         * Id of video tweet.\n         */\n    id: PropTypes.string.isRequired,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterVideoEmbed, aborting load.')\n          return\n        }\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createVideo(\n            this.props.id,\n            this.refs.embedContainer\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterOnAirButton extends Component {\n  static propTypes = {\n    /**\n     * Username for which you require periscope on air button\n     */\n    username: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterOnAirButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createPeriscopeOnAirButton(\n            this.props.username,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}